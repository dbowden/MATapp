runApp('MATapp.R')
table(programs$Certification)
runApp('MATapp.R')
runApp('MATapp.R')
?addProviderTiles
runApp('providers_app.R')
?tabPanel
runApp('providers_app.R')
runApp('providers_app.R')
runApp('providers_app.R')
runApp('providers_app.R')
# create a fake variable for testing
programs$Magazines <- sample(c("Good", "Decent", "Bad"), replace=T)
runApp('providers_app.R')
runApp('providers_app.R')
View(programs)
runApp('providers_app.R')
table(programs$Magazines)
runApp('providers_app.R')
?sample
runApp('providers_app.R')
runApp('providers_app.R')
programs <- read.csv("hf_samsha_programs_recoded.csv")
# create a fake variable for testing
programs$Magazines <- sample(c("Good", "Decent", "Bad"), replace=T)
table(programs$Magazines)
# create a fake variable for testing
programs$Magazines <- sample(c("Good", "Decent", "Bad"), replace=T)
table(programs$Magazines)
readr::write_csv(programs, "programs_testing.csv")
runApp('providers_app.R')
runApp('programs_app.R')
runApp('programs_app.R')
DT::renderDataTable()
?DT::renderDataTable
?DT::datatable
runApp('programs_app.R')
library(shiny); runApp('programs_app.R')
runApp('programs_app.R')
programs <- read.csv("dbhids_geocoded.csv")
programs <- programs[,-X]
programs <- programs[,-'X']
programs <- programs[,-c('X')]
programs <- subset(programs, select=-c(X))
library(shiny); runApp('dbhids_app.R')
runApp('dbhids_app.R')
colnames(programs)
runApp('dbhids_app.R')
?checkboxInput
?checkboxGroupInput
runApp('checkbox.R')
runApp('checkbox.R')
data <- mtcars
runApp('checkbox.R')
runApp('checkbox.R')
runApp('checkbox.R')
len(c("a","b"))
length(c("a","b"))
boxes <- c("Buprenorphine.","Methadone.")
programs %>%
filter_if(vars(. %in% boxes))
?vars
programs %>%
filter_if(vars(one_of(boxes)))
programs %>%
filter_at(vars(one_of(boxes)))
filter_at(programs, vars(one_of(boxes)))
filter_at(programs, vars(one_of(boxes)), any_vars(. == "Yes"))
table(programs$Buprenorphine.=="Yes")
table(programs$Buprenorphine.=="Yes" | programs$Methadone.=="Yes")
runApp('dbhids_app.R')
runApp('dbhids_app.R')
?checkboxGroupInput
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
table(programs$Buprenorphine.)
table(programs$Methadone.)
table(programs$Vivitrol.)
runApp('dbhids_app.R')
runApp('dbhids_app.R')
?reactive
runApp('dbhids_app.R')
runApp('dbhids_app.R')
?filter_if
filter_if(programs, vars(one_of(boxes)), any_vars(. == "Yes"))
filter_at(programs, ~ all(. %in% boxes), any_vars(. == "Yes"))
filter_if(programs, ~ all(. %in% boxes), any_vars(. == "Yes"))
filter_if(programs, (. %in% boxes), any_vars(. == "Yes"))
filter_if(programs, all(. %in% boxes), any_vars(. == "Yes"))
filter_if(programs, is_in(boxes), any_vars(. == "Yes"))
?is_in
filter_if(programs, (. %in% boxes), any_vars(. == "Yes"))
filter_if(programs, ~ all(. %in% boxes), any_vars(. == "Yes"))
filter_if(programs, as_function(~ x %in% boxes), any_vars(. == "Yes"))
programs %>% filter_if(~ %in% boxes, any_vars(. == "Yes"))
programs %>% filter_if(~ (. %in% boxes), any_vars(. == "Yes"))
?is_in
programs %>% filter_if(~is_in(boxes), any_vars(. == "Yes"))
programs %>% filter_if(~is_in(as.table(boxes)), any_vars(. == "Yes"))
programs %>% filter_if(~one_of(boxes)), any_vars(. == "Yes"))
programs %>% filter_if(~one_of(boxes), any_vars(. == "Yes"))
programs %>% filter_if(function(x) x %in% boxes, any_vars(. == "Yes"))
programs %>% filter_if(all_vars(one_of(boxes)), any_vars(. == "Yes"))
programs %>% filter_if(all_vars(is_in(boxes)), any_vars(. == "Yes"))
programs %>% filter_if(all_vars(is_in(boxes)), any_vars(. == "Yes"))
programs %>% filter_if(function(x) x %in% boxes, any_vars(. == "Yes"))
?all
programs %>% filter_if(all(. %in% boxes), any_vars(. == "Yes"))
namein <- function(x) all(x %in% boxes)
programs %>% filter_if(namein, any_vars(. == "Yes"))
programs %>% filter_if(~(is_in(., boxes)), any_vars(. == "Yes"))
runApp('dbhids_app.R')
runApp('dbhids_app.R')
boxes <- c("Methadone.")
filter_at(programs, vars(one_of(boxes)), any_vars(. == "Yes"))
runApp('dbhids_app.R')
??data_map
?addCircleMarkers
"Methadone." %in% boxes
filter_at(programs, vars(one_of(boxes)), any_vars(. == "Yes"))
filter_at(programs, vars(one_of(boxes)), -any_vars(. == "No"))
filter_at(programs, vars(one_of(boxes)), !any_vars(. == "No"))
filter_at(programs, vars(one_of(boxes)), !!any_vars(. == "No"))
filter_at(programs, vars(one_of(boxes)), any_vars(. == "Yes"))
filter_at(programs, vars(one_of(boxes)), any_vars(. == "No"))
filter_at(programs, vars(one_of(boxes)), -any_vars(. == "No"))
filter_at(programs, vars(one_of(boxes)), -! !any_vars(. == "No"))
filter_at(programs, vars(one_of(boxes)), any_vars(. != "Yes"))
table(programs$Methadone.)
filter_at(programs, vars(one_of(boxes)), any_vars(. != "No"))
boxes <- c()
filter_at(programs, vars(one_of(boxes)), any_vars(. != "No"))
?filter_all
boxes <- c(.Buprenorphine)
boxes <- c(".Buprenorphine")
programs %>%
{if(has_name(%in% boxes)) filter(. == "Yes") else .}
programs %>%
{if(all(%in% boxes)) filter(. == "Yes") else .}
programs %>%
{if(all(%in% boxes)) filter(. == "Yes") else .}
in_mats <- function(x) x %in% boxes
programs %>% filter_if(in_mats, any_vars(. == "Yes"))
apply(colnames(programs), in_mats)
?apply
tapply(colnames(programs), in_mats)
sapply(colnames(programs), in_mats)
boxes <- c("Buprenorphine.")
sapply(colnames(programs), in_mats)
programs %>% filter_if(in_mats, any_vars(. == "Yes"))
programs %>% filter_if(in_mats, tolower)
?select_if
programs %>% select_if(in_mats)
programs %>% select_if(is.character)
programs %>% select_if(is.factor)
names(programs)
in_mats <- function(x) names(x) %in% boxes
programs %>% select_if(in_mats)
filter_if
programs %>% filter_if(in_mats)
in_mats <- function(x) x %in% boxes
programs %>% filter_if(in_mats)
programs %>% filter_if(in_mats, .)
tbl_vars(programs)
in_mats <- tapply(x, function(x) x %in% boxes)
programs %>% filter_if(is.double, .)
programs %>% filter_if(is.factor, .)
programs %>% filter_if(all(is.factor), .)
programs %>% select_if(all(is.factor))
programs %>% select_if(is.factor)
programs %>% filter_if(is.factor, any_vars(. != "No"))
programs %>% filter_if(is.factor, any_vars(. == "Yes"))
programs %>% filter_if(is.factor, all_vars(. == "Yes"))
programs %>% filter_if(is.factor, any_vars(. == "Yes"))
boxes <- c("Buprenorphine.", "Methadone.")
in_mats <-
filter_at(programs, vars(one_of(boxes)), any_vars(. != "No"))
in_mats <-
filter_at(programs, vars(one_of(boxes)), any_vars(. == "Yes"))
filter_at(programs, vars(one_of(boxes)), any_vars(. == "Yes"))
in_mats <-
filter_at(programs, vars(one_of(boxes)), all_vars(. == "Yes"))
filter_at(programs, vars(one_of(boxes)), all_vars(. == "Yes"))
programs %>% filter_if(is.factor, all_vars(. == "Yes"))
namein <- function(x) colnames(x)[1] %in% boxes
programs %>% filter_if(namein, all_vars(. == "Yes"))
select_if(programs, namein)
namein <- function(x) x %in% boxes
select_if(programs, namein)
is.factor
programs %>% filter_if(namein, all_vars(. == "Yes"))
namein <- function(x) colnames(x) %in% boxes
programs %>% filter_if(namein, all_vars(. == "Yes"))
colnames(programs) %in% boxes
?filter_if
is.numeric(programs$Zip)
programs$Buprenorphine. %in% boxes
names(programs$Buprenorphine.) %in% boxes
colnames(programs$Buprenorphine.) %in% boxes
attr(programs$Buprenorphine.)$name %in% boxes
attr(programs$Buprenorphine.)
nnames(programs)
names(programs)
attr(programs$Zip, "names")
attr(programs$Zip, names)
attr(programs$Zip, "dimnames")
attr(programs$Zip, "rownames")
namein <- function(x) colnames(x) %in% boxes
select_if(programs, namein)
select_if(programs, is.factor)
select_if(programs, one_of(boxes))
select_if(programs, vars(one_of(boxes)))
checkbox_filter <- function(data, boxout){
# if checkbox output is empty, return original dataframe
if (is.null(boxout)){
return(data)
# if checkbox out is not empty, apply function
} else {
# create a subset of columns that match checkbox output
cols <- data[, colnames(data) %in% boxout]
# test whether all remaining columns == "Yes"
keep <- ifelse(rowSums(cols == "Yes") == ncol(cols), 1, 0)
# cbind
data <- cbind(data, keep)
# drop rows that don't meet condition
data <- subset(data, keep==1)
# remove keep column
data <- data[,-c("keep")]
return(data)
}
checkbox_filter(programs, boxes)
}
checkbox_filter(programs, boxes)
checkbox_filter <- function(data, boxout){
# if checkbox output is empty, return original dataframe
if (is.null(boxout)){
return(data)
# if checkbox out is not empty, apply function
} else {
# create a subset of columns that match checkbox output
cols <- data[, colnames(data) %in% boxout]
# test whether all remaining columns == "Yes"
keep <- ifelse(rowSums(cols == "Yes") == ncol(cols), 1, 0)
# cbind
data <- cbind(data, keep)
# drop rows that don't meet condition
data <- subset(data, keep==1)
# remove keep column
data <- subset(data, select = -c(keep))
return(data)
}
}
checkbox_filter(programs, boxes)
table(programs$Buprenorphine.=="Yes" & programs$Methadone.=="Yes")
runApp('dbhids_app.R')
runApp('dbhids_app.R')
?checkboxGroupInput
runApp('dbhids_app.R')
runApp('dbhids_app.R')
observeEvent()
?observeEvent
runApp('dbhids_app.R')
?reactive
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('checkbox.R')
runApp('dbhids_app.R')
runApp('checkbox.R')
runApp('dbhids_app.R')
runApp('checkbox.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
install.packages(c("collections", "glmmTMB", "igraph", "ModelMetrics", "pROC", "Rcpp", "recipes", "units"))
tinytex::tlmgr_update()
providers_residences <- read.csv("~/MATapp/providers_residences.csv")
View(providers_residences)
table(providers_residences$Possible_Residence)
library(shiny); runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
library(shiny); runApp('dbhids_app.R')
runApp('programs_app.R')
runApp('dbhids_app.R')
View(programs)
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('ships_example.R')
?checkboxGroupInput
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('~/Downloads/practice.R')
runApp('~/Downloads/practice.R')
?selectInput
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('~/Downloads/practice.R')
runApp('dbhids_app.R')
runApp('~/Downloads/table_only.R')
runApp('table_only.R')
colnames(programs)
runApp('table_only.R')
runApp('table_only.R')
?checkboxInput
runApp('table_only.R')
sidebarLayout()
?sidebarLayout
?sidebarPanel
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
?renderDataTable
runApp('table_only.R')
?addCircleMarkers
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('table_only.R')
runApp('dbhids_app.R')
table(programs$Same.day.induction.during.walk.in.hours.)
runApp('dbhids_app.R')
runApp('dbhids_app.R')
library(shiny); runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
paste("\"",programs$Website,"\"",sep="")
paste(programs$Website)
runApp('dbhids_app.R')
shiny::a(paste(programs$Website[1]))
programs$url <- a(paste(programs$Website))
programs$url <- apply(programs$Website, 1, a(paste(x)))
programs$url <- apply(programs$Website, 1, function(x) a(paste(x)))
?apply
programs$url <- apply(programs$Website, 2, function(x) a(paste(x)))
programs$url <- lapply(programs$Website, function(x) a(paste(x)))
programs$url <- tapply(programs$Website, function(x) a(paste(x)))
programs$url <- sapply(programs$Website, function(x) a(paste(x)))
programs$url <- sapply(programs$Website, function(x) paste(x))
programs$Website <- as.character(programs$Website)
a(programs$Website)
a(programs$Website[1])
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
install.packages(c("arm", "boot", "class", "collections", "countrycode", "KernSmooth", "MASS", "mnormt", "modelr", "nnet", "pkgbuild", "RcppArmadillo", "recipes", "rematch2", "rex", "sjlabelled", "spatial", "usethis", "VGAM", "xml2"))
tinytex::tlmgr_update()
tinytex::tlmgr_install('luahbtex')
tinytex::tlmgr_update()
install.packages(c("attempt", "countrycode", "git2r", "MCMCpack", "openxlsx", "performance", "pillar", "pkgbuild", "ps", "rlang", "sf", "sjstats", "tidyr", "zoo"))
install.packages(c("MCMCpack", "ps"))
tinytex::tlmgr_update()
install.packages("tidyverse")
install.packages("tidyverse")
install.packages(c("DT", "leaflet", "shiny"))
install.packages(c("boot", "class", "foreign", "KernSmooth", "MASS", "nnet", "spatial"))
install.packages(c("states", "skimr"))
install.packages("vctrs")
install.packages(c("states", "skimr"))
tinytex::tlmgr_update()
install.packages(c("backports", "ellipsis", "glue", "vctrs"))
install.packages(c("backports", "ellipsis", "glue", "vctrs"))
library(shiny); runApp('dbhids_app.R')
programs <- read.csv("dbhids_geocoded.csv")
programs[1:5,]
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
library(shiny); runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
devtools::install_github("rstudio/leaflet.mapboxgl")
devtools::install_github("rstudio/leaflet.mapboxgl")
library(leaflet.mapboxgl)
runApp('dbhids_app.R')
runApp('dbhids_app.R')
options(mapbox.accessToken="pk.eyJ1IjoiZGJvd2Rlbjg4IiwiYSI6ImNrY2o1ajQzZzB4Y2QzMXFpaGJucHhjd2sifQ.TCHKVXjh97jPWuvA1v8tFw")
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
library(leaflet)
library(shiny); runApp('dbhids_app.R')
getOption('MAPBOX_ACCESSS_TOKEN')
getOption('mapbox.accessToken')
getOption(mapbox.accessToken)
options('MAPBOX_ACCESS_TOKEN'='pk.eyJ1IjoiZGJvd2Rlbjg4IiwiYSI6ImNrY2o1ajQzZzB4Y2QzMXFpaGJucHhjd2sifQ.TCHKVXjh97jPWuvA1v8tFw')
runApp('dbhids_app.R')
getOption('MAPBOX_ACCESS_TOKEN')
Sys.getenv('MAPBOX_ACCESS_TOKEN')
Sys.setenv('MAPBOX_ACCESS_TOKEN' = 'pk.eyJ1IjoiZGJvd2Rlbjg4IiwiYSI6ImNrY2o1ajQzZzB4Y2QzMXFpaGJucHhjd2sifQ.TCHKVXjh97jPWuvA1v8tFw')
runApp('dbhids_app.R')
Sys.getenv('MAPBOX_ACCESS_TOKEN')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
getOption('mapbox.accessToken')
options(mapbox.accessToken = 'pk.eyJ1IjoiZGJvd2Rlbjg4IiwiYSI6ImNrY2o1ajQzZzB4Y2QzMXFpaGJucHhjd2sifQ.TCHKVXjh97jPWuvA1v8tFw')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
getOption('mapbox.accessToken')
is.null(getOption('mapbox.accessToken'))
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
options(mapbox.accessToken = 'pk.eyJ1IjoiZGJvd2Rlbjg4IiwiYSI6ImNrY2o1ajQzZzB4Y2QzMXFpaGJucHhjd2sifQ.TCHKVXjh97jPWuvA1v8tFw')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
?providerTileOptions
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
clusteropt <- NULL
clusteropt
runApp('dbhids_app.R')
?markerClusterOptions
?checkboxInput
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
install.packages("shinythemes")
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
runApp('dbhids_app.R')
# load data
programs <- read.csv("dbhids_geocoded.csv")
programs <- subset(programs, select=-c(X))
providers <- read.csv("old/BupePrescribersData_ToPrint - allnames_June2020.csv")
providers <- read.csv("BupePrescribersData_ToPrint - allnames_June2020.csv")
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('old/ships_example.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
install.packages(c("arm", "collections", "data.table", "effectsize", "ggeffects", "parameters", "performance", "rstan", "rvest", "sys", "xfun"))
install.packages(c("arm", "performance", "rstan"))
install.packages(c("arm", "performance", "rstan"))
library(shiny); runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
runApp('MATchmaker.R')
install.packages(c("callr", "cli", "clipr", "furrr", "globals", "igraph", "lhs", "plm", "ps", "Rcmdr", "readr", "rlang", "rstan", "sp", "tibble", "workflows"))
